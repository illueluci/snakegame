import pygame
from pygame.locals import *
import time
import random

SIZE = 20
BACKGROUND_COLOR = (151, 232, 151)
SIL = 6  # Snake Initial Length
WINSIZE = (700,700)

class Apple:
    def __init__(self, parent_screen):
        self.image = pygame.image.load("resources/apple.jpg").convert()
        self.parent_screen = parent_screen
        self.x = SIZE*3
        self.y = SIZE*3

    def draw(self):
        self.parent_screen.blit(self.image, (self.x, self.y))
        pygame.display.flip()

    def move(self):
        self.x = random.randint(0,34) * SIZE
        self.y = random.randint(0,34) * SIZE

class GoldenApple(Apple):
    def __init__(self, parent_screen):
        super().__init__(parent_screen=parent_screen)
        self.image = pygame.image.load("resources/golden_apple.jpg").convert()
        self.x = random.randint(0,34) * SIZE
        self.y = random.randint(0,34) * SIZE


class Snake:
    def __init__(self, parent_screen, length):
        self.length = length
        self.parent_screen = parent_screen
        self.block = pygame.image.load("resources/square.jpg").convert()
        self.x = [SIZE]*length
        self.y = [SIZE]*length
        self.direction = 'down'

    def increase_length(self):
        self.length += 1
        self.x.append(-1)
        self.y.append(-1)

    def draw(self):
        for i in range(self.length):
            self.parent_screen.blit(self.block, (self.x[i], self.y[i]))
        pygame.display.flip()

    def move_left(self):
        self.direction = 'left'

    def move_right(self):
        self.direction = 'right'

    def move_up(self):
        self.direction = 'up'

    def move_down(self):
        self.direction = 'down'

    def walk(self):

        for i in range(self.length-1, 0, -1):
            self.x[i] = self.x[i-1]
            self.y[i] = self.y[i-1]

        if self.direction == 'left':
            self.x[0] -= SIZE
        if self.direction == 'right':
            self.x[0] += SIZE
        if self.direction == 'up':
            self.y[0] -= SIZE
        if self.direction == 'down':
            self.y[0] += SIZE
        self.draw()

class Game:
    def __init__(self):
        pygame.init()
        pygame.display.set_caption("Codebasics Snake and Apple Game")

        pygame.mixer.init()
        self.play_background_music("ショッピングモール.mp3")

        self.surface = pygame.display.set_mode(WINSIZE)
        self.render_background("green-skin-gf55418412_1920.jpg")
        self.snake = Snake(self.surface, SIL)
        self.snake.draw()
        self.apple = Apple(self.surface)
        self.apple.draw()
        self.apple_eaten_number = 0
        self.golden_apple = GoldenApple(self.surface)
        self.clock = pygame.time.Clock()
        self.golden_apple_appear = False
        # self.golden_apple_event = pygame.USEREVENT + 1
        self.current_time = pygame.time.get_ticks()
        self.golden_apple_appear_time = 0

    def is_collision(self, x1, y1, x2, y2):
        if x2 <= x1 < x2 + SIZE:
            if y2 <= y1 < y2 + SIZE:
                return True
        return False

    def eating_apple(self, xa, ya):
        if self.is_collision(self.snake.x[0], self.snake.y[0], xa, ya):
            self.play_sound("Pop 1.mp3")
            self.snake.increase_length()
            self.apple.move()
            pygame.time.wait(100)
            self.apple_eaten_number += 1
            # print(self.apple_eaten_number)

    def eating_golden_apple(self, xa, ya):
        if self.is_collision(self.snake.x[0], self.snake.y[0], xa, ya) and self.golden_apple_appear:
            for i in range(5):
                self.play_sound("Pop 1.mp3")
                self.snake.increase_length()
                self.golden_apple.move()
                pygame.time.wait(100)
            self.golden_apple_appear = False


    def is_out_of_bounds(self, x, y):
        if x < 0 or x > WINSIZE[0]-SIZE or y < 0 or y > WINSIZE[1]-SIZE:
            return True
        return False

    def play_sound(self, mp3name):
        sound = pygame.mixer.Sound(f"resources/{mp3name}")
        pygame.mixer.Sound.play(sound)

    def play_background_music(self, mp3name):
        pygame.mixer.music.load(f"resources/{mp3name}")
        pygame.mixer.music.play(-1)

    def render_background(self, jpgname):
        bg = pygame.image.load(f"resources/{jpgname}")
        self.surface.blit(bg, (0,0))

    def display_score(self):
        font = pygame.font.SysFont('arial', 20)
        score = font.render(f"Score: {self.snake.length}", True, (0,0,0))
        self.surface.blit(score, (550,10))

    def play(self):
        self.render_background("green-skin-gf55418412_1920.jpg")
        self.snake.walk()
        self.apple.draw()
        self.display_score()
        self.current_time = pygame.time.get_ticks()
        pygame.display.flip()

        # snake colliding with apple
        self.eating_apple(self.apple.x, self.apple.y)
        # snake colliding with g.apple
        self.eating_golden_apple(self.golden_apple.x, self.golden_apple.y)

        # g.apple appearance

        if self.apple_eaten_number >= 10:
            self.golden_apple_appear = True
            self.golden_apple_appear_time = pygame.time.get_ticks()
            self.apple_eaten_number = 0

        if self.golden_apple_appear:
            self.golden_apple.draw()
            if self.current_time - self.golden_apple_appear_time > 10000:
                self.golden_apple.move()
                self.golden_apple_appear = False

        # print(self.current_time, self.golden_apple_appear_time)
        # print(self.golden_apple_appear)

        # if self.apple_eaten_number % 5 == 0 and self.apple_eaten_number != 0:
        #     pygame.time.set_timer(self.golden_apple_event, 10000)

        # g.apple collision
        # if self.is_collision(self.snake.x[0], self.snake.y[0], self.golden_apple.x, self.golden_apple.y):
        #     for i in range(0,5):
        #         self.play_sound("Pop 1.mp3")
        #         self.snake.increase_length()
        #         pygame.time.wait(100)
        #     self.golden_apple.move()
            # self.golden_apple_appear = False


        #snake colliding with itself
        for i in range(3, self.snake.length):
            if self.is_collision(self.snake.x[0], self.snake.y[0], self.snake.x[i], self.snake.y[i]):
                self.play_sound("Fail 1.mp3")
                raise "Game over"

        #snake goes out of bounds
        if self.is_out_of_bounds(self.snake.x[0], self.snake.y[0]):
            self.play_sound("Fail 1.mp3")
            raise "Game over"

    def show_game_over(self):
        self.render_background("green-skin-gf55418412_1920.jpg")
        font = pygame.font.SysFont('arial', 30)
        line1 = font.render(f"Game is over! Your score is {self.snake.length}", True, (0,0,0))
        self.surface.blit(line1, (100,300))
        line2 = font.render("To play again press Enter, To exit press escape!", True, (0,0,0))
        self.surface.blit(line2, (100,340))
        pygame.display.flip()

        pygame.mixer.music.pause()

    def reset(self):
        self.snake = Snake(self.surface, SIL)
        self.apple = Apple(self.surface)
        self.golden_apple = GoldenApple(self.surface)
        self.current_time = 0
        self.golden_apple_appear_time = 0
        self.golden_apple_appear = False
        self.apple_eaten_number = 0

    def run(self):
        running = True
        pause = False
        while running:
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        running = False
                    if event.key == K_RETURN:
                        pause = False
                        pygame.mixer.music.unpause()
                    if not pause:
                        if event.key == K_UP and not(self.snake.direction == "down"):
                            self.snake.move_up()
                        if event.key == K_DOWN and not(self.snake.direction == "up"):
                            self.snake.move_down()
                        if event.key == K_LEFT and not(self.snake.direction == "right"):
                            self.snake.move_left()
                        if event.key == K_RIGHT and not(self.snake.direction == "left"):
                            self.snake.move_right()

                # if event.type == self.golden_apple_event:
                #     self.golden_apple.draw()

                elif event.type == QUIT:
                    running = False
            try:
                if not pause:
                    self.play()
            except Exception as e:
                print(e)
                self.show_game_over()
                pause = True
                self.reset()
            self.clock.tick(10)


if __name__ == "__main__":
    game = Game()
    game.run()


